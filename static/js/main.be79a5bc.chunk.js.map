{"version":3,"sources":["config.js","components/api-authorization/ApiAuthorizationConstants.js","components/api-authorization/AuthorizeService.js","components/api-authorization/LoginMenu.js","components/NavMenu.js","components/Layout.js","components/Home.js","components/FetchData.js","components/Counter.js","components/api-authorization/AuthorizeRoute.js","components/api-authorization/Login.js","components/api-authorization/Logout.js","components/api-authorization/ApiAuthorizationRoutes.js","App.js","registerServiceWorker.js","index.js"],"names":["config","stsUrl","apiUrl","ApplicationName","document","baseURI","replace","split","join","QueryParameterNames","LogoutActions","LoginActions","prefix","ApplicationPaths","DefaultLoginRedirectPath","ApiAuthorizationClientConfigurationUrl","ApiAuthorizationPrefix","Login","LoginFailed","LoginCallback","Register","Profile","LogOut","LoggedOut","LogOutCallback","IdentityRegisterPath","IdentityManagePath","authService","_callbacks","_nextSubscriptionId","_user","_isAuthenticated","_popUpDisabled","this","getUser","user","profile","ensureUserManagerInitialized","userManager","access_token","state","signinSilent","createArguments","silentUser","updateState","success","console","log","Error","signinPopup","popUpUser","message","error","signinRedirect","redirect","url","signinCallback","signoutPopup","undefined","signoutRedirect","signoutCallback","response","data","notifySubscribers","callback","push","subscription","subscriptionId","subscriptionIndex","map","element","index","found","filter","length","splice","i","useReplaceToNavigate","status","AuthenticationResultStatus","Fail","Success","Redirect","fetch","ok","json","settings","automaticSilentRenew","includeIdTokenInSilentRenew","userStore","WebStorageStateStore","UserManager","events","addUserSignedOut","a","async","removeUser","LoginMenu","props","isAuthenticated","userName","_subscription","subscribe","populateState","unsubscribe","Promise","all","setState","name","profilePath","logoutPath","pathname","local","authenticatedView","registerPath","loginPath","anonymousView","NavItem","NavLink","tag","Link","className","to","Component","NavMenu","toggleNavbar","bind","collapsed","Navbar","light","Container","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","displayName","Layout","children","Home","FetchData","forecasts","loading","populateWeatherData","contents","renderForecastsTable","id","getAccessToken","token","headers","aria-labelledby","forecast","key","date","temperatureC","temperatureF","summary","Counter","currentCount","incrementCounter","aria-live","AuthorizeRoute","ready","authenticated","authenticationChanged","populateAuthenticationState","redirectUrl","encodeURI","window","location","href","component","rest","render","action","login","getReturnUrl","processLoginCallback","URLSearchParams","search","get","redirectToProfile","redirectToRegister","returnUrl","signIn","result","navigateToReturnUrl","completeSignIn","fromQuery","startsWith","origin","redirectToApiAuthorizationPath","apiAuthorizationPath","Logout","isReady","history","logout","processLogoutCallback","signOut","completeSignOut","ApiAuthorizationRoutes","path","loginAction","logoutAction","App","exact","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","baseUrl","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","basename","URL","process","addEventListener","indexOf","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.be79a5bc.chunk.js","sourcesContent":["const isDev = process.env.NODE_ENV === 'development';\n\nconst devConfig = {\n  stsUrl: 'https://aspnetcorests.herokuapp.com',\n  apiUrl: 'https://aspnetcorespa.herokuapp.com',\n};\nconst prodConfig = {\n  stsUrl: 'https://aspnetcorests.herokuapp.com',\n  apiUrl: 'https://aspnetcorespa.herokuapp.com',\n};\n\nexport const config = isDev ? devConfig : prodConfig;\n","import { config } from '../../config';\n\nexport const ApplicationName = document.baseURI\n  .replace(/\\//g, '')\n  .replace(/:/g, '')\n  .split('.')\n  .join('');\n\nexport const QueryParameterNames = {\n  ReturnUrl: 'returnUrl',\n  Message: 'message',\n};\n\nexport const LogoutActions = {\n  LogoutCallback: 'logout-callback',\n  Logout: 'logout',\n  LoggedOut: 'logged-out',\n};\n\nexport const LoginActions = {\n  Login: 'login',\n  LoginCallback: 'login-callback',\n  LoginFailed: 'login-failed',\n  Profile: 'profile',\n  Register: 'register',\n};\n\nconst prefix = '/authentication';\n\nexport const ApplicationPaths = {\n  DefaultLoginRedirectPath: '/',\n  ApiAuthorizationClientConfigurationUrl: `${config.stsUrl}/_configuration/${ApplicationName}`,\n  ApiAuthorizationPrefix: prefix,\n  Login: `${prefix}/${LoginActions.Login}`,\n  LoginFailed: `${prefix}/${LoginActions.LoginFailed}`,\n  LoginCallback: `${prefix}/${LoginActions.LoginCallback}`,\n  Register: `${prefix}/${LoginActions.Register}`,\n  Profile: `${prefix}/${LoginActions.Profile}`,\n  LogOut: `${prefix}/${LogoutActions.Logout}`,\n  LoggedOut: `${prefix}/${LogoutActions.LoggedOut}`,\n  LogOutCallback: `${prefix}/${LogoutActions.LogoutCallback}`,\n  IdentityRegisterPath: '/Identity/Account/Register',\n  IdentityManagePath: '/Identity/Account/Manage',\n};\n","import { UserManager, WebStorageStateStore } from 'oidc-client';\nimport { ApplicationPaths, ApplicationName } from './ApiAuthorizationConstants';\n\nexport class AuthorizeService {\n    _callbacks = [];\n    _nextSubscriptionId = 0;\n    _user = null;\n    _isAuthenticated = false;\n\n    // By default pop ups are disabled because they don't work properly on Edge.\n    // If you want to enable pop up authentication simply set this flag to false.\n    _popUpDisabled = true;\n\n    async isAuthenticated() {\n        const user = await this.getUser();\n        return !!user;\n    }\n\n    async getUser() {\n        if (this._user && this._user.profile) {\n            return this._user.profile;\n        }\n\n        await this.ensureUserManagerInitialized();\n        const user = await this.userManager.getUser();\n        return user && user.profile;\n    }\n\n    async getAccessToken() {\n        await this.ensureUserManagerInitialized();\n        const user = await this.userManager.getUser();\n        return user && user.access_token;\n    }\n\n    // We try to authenticate the user in three different ways:\n    // 1) We try to see if we can authenticate the user silently. This happens\n    //    when the user is already logged in on the IdP and is done using a hidden iframe\n    //    on the client.\n    // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n    //    Pop-Up blocker or the user has disabled PopUps.\n    // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n    //    redirect flow.\n    async signIn(state) {\n        await this.ensureUserManagerInitialized();\n        try {\n            const silentUser = await this.userManager.signinSilent(this.createArguments());\n            this.updateState(silentUser);\n            return this.success(state);\n        } catch (silentError) {\n            // User might not be authenticated, fallback to popup authentication\n            console.log(\"Silent authentication error: \", silentError);\n\n            try {\n                if (this._popUpDisabled) {\n                    throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\n                }\n\n                const popUpUser = await this.userManager.signinPopup(this.createArguments());\n                this.updateState(popUpUser);\n                return this.success(state);\n            } catch (popUpError) {\n                if (popUpError.message === \"Popup window closed\") {\n                    // The user explicitly cancelled the login action by closing an opened popup.\n                    return this.error(\"The user closed the window.\");\n                } else if (!this._popUpDisabled) {\n                    console.log(\"Popup authentication error: \", popUpError);\n                }\n\n                // PopUps might be blocked by the user, fallback to redirect\n                try {\n                    await this.userManager.signinRedirect(this.createArguments(state));\n                    return this.redirect();\n                } catch (redirectError) {\n                    console.log(\"Redirect authentication error: \", redirectError);\n                    return this.error(redirectError);\n                }\n            }\n        }\n    }\n\n    async completeSignIn(url) {\n        try {\n            await this.ensureUserManagerInitialized();\n            const user = await this.userManager.signinCallback(url);\n            this.updateState(user);\n            return this.success(user && user.state);\n        } catch (error) {\n            console.log('There was an error signing in: ', error);\n            return this.error('There was an error signing in.');\n        }\n    }\n\n    // We try to sign out the user in two different ways:\n    // 1) We try to do a sign-out using a PopUp Window. This might fail if there is a\n    //    Pop-Up blocker or the user has disabled PopUps.\n    // 2) If the method above fails, we redirect the browser to the IdP to perform a traditional\n    //    post logout redirect flow.\n    async signOut(state) {\n        await this.ensureUserManagerInitialized();\n        try {\n            if (this._popUpDisabled) {\n                throw new Error('Popup disabled. Change \\'AuthorizeService.js:AuthorizeService._popupDisabled\\' to false to enable it.')\n            }\n\n            await this.userManager.signoutPopup(this.createArguments());\n            this.updateState(undefined);\n            return this.success(state);\n        } catch (popupSignOutError) {\n            console.log(\"Popup signout error: \", popupSignOutError);\n            try {\n                await this.userManager.signoutRedirect(this.createArguments(state));\n                return this.redirect();\n            } catch (redirectSignOutError) {\n                console.log(\"Redirect signout error: \", redirectSignOutError);\n                return this.error(redirectSignOutError);\n            }\n        }\n    }\n\n    async completeSignOut(url) {\n        await this.ensureUserManagerInitialized();\n        try {\n            const response = await this.userManager.signoutCallback(url);\n            this.updateState(null);\n            return this.success(response && response.data);\n        } catch (error) {\n            console.log(`There was an error trying to log out '${error}'.`);\n            return this.error(error);\n        }\n    }\n\n    updateState(user) {\n        this._user = user;\n        this._isAuthenticated = !!this._user;\n        this.notifySubscribers();\n    }\n\n    subscribe(callback) {\n        this._callbacks.push({ callback, subscription: this._nextSubscriptionId++ });\n        return this._nextSubscriptionId - 1;\n    }\n\n    unsubscribe(subscriptionId) {\n        const subscriptionIndex = this._callbacks\n            .map((element, index) => element.subscription === subscriptionId ? { found: true, index } : { found: false })\n            .filter(element => element.found === true);\n        if (subscriptionIndex.length !== 1) {\n            throw new Error(`Found an invalid number of subscriptions ${subscriptionIndex.length}`);\n        }\n\n        this._callbacks.splice(subscriptionIndex[0].index, 1);\n    }\n\n    notifySubscribers() {\n        for (let i = 0; i < this._callbacks.length; i++) {\n            const callback = this._callbacks[i].callback;\n            callback();\n        }\n    }\n\n    createArguments(state) {\n        return { useReplaceToNavigate: true, data: state };\n    }\n\n    error(message) {\n        return { status: AuthenticationResultStatus.Fail, message };\n    }\n\n    success(state) {\n        return { status: AuthenticationResultStatus.Success, state };\n    }\n\n    redirect() {\n        return { status: AuthenticationResultStatus.Redirect };\n    }\n\n    async ensureUserManagerInitialized() {\n        if (this.userManager !== undefined) {\n            return;\n        }\n\n        let response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n        if (!response.ok) {\n            throw new Error(`Could not load settings for '${ApplicationName}'`);\n        }\n\n        let settings = await response.json();\n        settings.automaticSilentRenew = true;\n        settings.includeIdTokenInSilentRenew = true;\n        settings.userStore = new WebStorageStateStore({\n            prefix: ApplicationName\n        });\n\n        this.userManager = new UserManager(settings);\n\n        this.userManager.events.addUserSignedOut(async () => {\n            await this.userManager.removeUser();\n            this.updateState(undefined);\n        });\n    }\n\n    static get instance() { return authService }\n}\n\nconst authService = new AuthorizeService();\n\nexport default authService;\n\nexport const AuthenticationResultStatus = {\n    Redirect: 'redirect',\n    Success: 'success',\n    Fail: 'fail'\n};\n","import React, { Component, Fragment } from 'react';\nimport { NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport authService from './AuthorizeService';\nimport { ApplicationPaths } from './ApiAuthorizationConstants';\n\nexport class LoginMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isAuthenticated: false,\n      userName: null,\n    };\n  }\n\n  componentDidMount() {\n    this._subscription = authService.subscribe(() => this.populateState());\n    this.populateState();\n  }\n\n  componentWillUnmount() {\n    authService.unsubscribe(this._subscription);\n  }\n\n  async populateState() {\n    const [isAuthenticated, user] = await Promise.all([authService.isAuthenticated(), authService.getUser()]);\n    this.setState({\n      isAuthenticated,\n      userName: user && user.name,\n    });\n  }\n\n  render() {\n    const { isAuthenticated, userName } = this.state;\n    if (!isAuthenticated) {\n      const registerPath = `${ApplicationPaths.Register}`;\n      const loginPath = `${ApplicationPaths.Login}`;\n      return this.anonymousView(registerPath, loginPath);\n    } else {\n      const profilePath = `${ApplicationPaths.Profile}`;\n      const logoutPath = { pathname: `${ApplicationPaths.LogOut}`, state: { local: true } };\n      return this.authenticatedView(userName, profilePath, logoutPath);\n    }\n  }\n\n  authenticatedView(userName, profilePath, logoutPath) {\n    return (\n      <Fragment>\n        <NavItem>\n          <NavLink tag={Link} className=\"text-dark\" to={profilePath}>\n            {userName}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink tag={Link} className=\"text-dark\" to={logoutPath}>\n            Logout\n          </NavLink>\n        </NavItem>\n      </Fragment>\n    );\n  }\n\n  anonymousView(registerPath, loginPath) {\n    return (\n      <Fragment>\n        <NavItem>\n          <NavLink tag={Link} className=\"text-dark\" to={registerPath}>\n            Register\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink tag={Link} className=\"text-dark\" to={loginPath}>\n            Login\n          </NavLink>\n        </NavItem>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { LoginMenu } from './api-authorization/LoginMenu';\nimport './NavMenu.css';\n\nexport class NavMenu extends Component {\n  static displayName = NavMenu.name;\n\n  constructor (props) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar () {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render () {\n    return (\n      <header>\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\">ReactSpa</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/counter\">Counter</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/fetch-data\">Fetch data</NavLink>\n                </NavItem>\n                <LoginMenu>\n                </LoginMenu>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render() {\n    return (\n      <div>\n        <h1>React Spa</h1>\n        <p>Single page application built using ReactJs</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport authService from './api-authorization/AuthorizeService'\n\nexport class FetchData extends Component {\n  static displayName = FetchData.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { forecasts: [], loading: true };\n  }\n\n  componentDidMount() {\n    this.populateWeatherData();\n  }\n\n  static renderForecastsTable(forecasts) {\n    return (\n      <table className='table table-striped' aria-labelledby=\"tabelLabel\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {forecasts.map(forecast =>\n            <tr key={forecast.date}>\n              <td>{forecast.date}</td>\n              <td>{forecast.temperatureC}</td>\n              <td>{forecast.temperatureF}</td>\n              <td>{forecast.summary}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    let contents = this.state.loading\n      ? <p><em>Loading...</em></p>\n      : FetchData.renderForecastsTable(this.state.forecasts);\n\n    return (\n      <div>\n        <h1 id=\"tabelLabel\" >Weather forecast</h1>\n        <p>This component demonstrates fetching data from the server.</p>\n        {contents}\n      </div>\n    );\n  }\n\n  async populateWeatherData() {\n    const token = await authService.getAccessToken();\n    const response = await fetch('weatherforecast', {\n      headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\n    });\n    const data = await response.json();\n    this.setState({ forecasts: data, loading: false });\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Counter extends Component {\n  static displayName = Counter.name;\n\n  constructor(props) {\n    super(props);\n    this.state = { currentCount: 0 };\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  incrementCounter() {\n    this.setState({\n      currentCount: this.state.currentCount + 1\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Counter</h1>\n\n        <p>This is a simple example of a React component.</p>\n\n        <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount}</strong></p>\n\n        <button className=\"btn btn-primary\" onClick={this.incrementCounter}>Increment</button>\n      </div>\n    );\n  }\n}\n","import React from 'react'\nimport { Component } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { ApplicationPaths, QueryParameterNames } from './ApiAuthorizationConstants'\nimport authService from './AuthorizeService'\n\nexport default class AuthorizeRoute extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ready: false,\n            authenticated: false\n        };\n    }\n\n    componentDidMount() {\n        this._subscription = authService.subscribe(() => this.authenticationChanged());\n        this.populateAuthenticationState();\n    }\n\n    componentWillUnmount() {\n        authService.unsubscribe(this._subscription);\n    }\n\n    render() {\n        const { ready, authenticated } = this.state;\n        const redirectUrl = `${ApplicationPaths.Login}?${QueryParameterNames.ReturnUrl}=${encodeURI(window.location.href)}`\n        if (!ready) {\n            return <div></div>;\n        } else {\n            const { component: Component, ...rest } = this.props;\n            return <Route {...rest}\n                render={(props) => {\n                    if (authenticated) {\n                        return <Component {...props} />\n                    } else {\n                        return <Redirect to={redirectUrl} />\n                    }\n                }} />\n        }\n    }\n\n    async populateAuthenticationState() {\n        const authenticated = await authService.isAuthenticated();\n        this.setState({ ready: true, authenticated });\n    }\n\n    async authenticationChanged() {\n        this.setState({ ready: false, authenticated: false });\n        await this.populateAuthenticationState();\n    }\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { LoginActions, QueryParameterNames, ApplicationPaths } from './ApiAuthorizationConstants';\nimport { config } from '../../config';\n\n// The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const action = this.props.action;\n    switch (action) {\n      case LoginActions.Login:\n        this.login(this.getReturnUrl());\n        break;\n      case LoginActions.LoginCallback:\n        this.processLoginCallback();\n        break;\n      case LoginActions.LoginFailed:\n        const params = new URLSearchParams(window.location.search);\n        const error = params.get(QueryParameterNames.Message);\n        this.setState({ message: error });\n        break;\n      case LoginActions.Profile:\n        this.redirectToProfile();\n        break;\n      case LoginActions.Register:\n        this.redirectToRegister();\n        break;\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n  }\n\n  render() {\n    const action = this.props.action;\n    const { message } = this.state;\n\n    if (!!message) {\n      return <div>{message}</div>;\n    } else {\n      switch (action) {\n        case LoginActions.Login:\n          return <div>Processing login</div>;\n        case LoginActions.LoginCallback:\n          return <div>Processing login callback</div>;\n        case LoginActions.Profile:\n        case LoginActions.Register:\n          return <div></div>;\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    }\n  }\n\n  async login(returnUrl) {\n    const state = { returnUrl };\n    const result = await authService.signIn(state);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        break;\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(returnUrl);\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.setState({ message: result.message });\n        break;\n      default:\n        throw new Error(`Invalid status result ${result.status}.`);\n    }\n  }\n\n  async processLoginCallback() {\n    const url = window.location.href;\n    const result = await authService.completeSignIn(url);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as the only time completeSignIn finishes\n        // is when we are doing a redirect sign in flow.\n        throw new Error('Should not redirect.');\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.setState({ message: result.message });\n        break;\n      default:\n        throw new Error(`Invalid authentication result status '${result.status}'.`);\n    }\n  }\n\n  getReturnUrl(state) {\n    const params = new URLSearchParams(window.location.search);\n    const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n    if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n    return (state && state.returnUrl) || fromQuery || `${window.location.origin}/`;\n  }\n\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(\n      `${ApplicationPaths.IdentityRegisterPath}?${QueryParameterNames.ReturnUrl}=${encodeURI(ApplicationPaths.Login)}`,\n    );\n  }\n\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    const redirectUrl = `${config.stsUrl}${apiAuthorizationPath}`;\n    // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser he gets sent back to where it was on the app instead of to an endpoint on this\n    // component.\n    window.location.replace(redirectUrl);\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    // It's important that we do a replace here so that we remove the callback uri with the\n    // fragment containing the tokens from the browser history.\n    window.location.replace(returnUrl);\n  }\n}\n","import React from 'react'\nimport { Component } from 'react';\nimport authService from './AuthorizeService';\nimport { AuthenticationResultStatus } from './AuthorizeService';\nimport { QueryParameterNames, LogoutActions, ApplicationPaths } from './ApiAuthorizationConstants';\n\n// The main responsibility of this component is to handle the user's logout process.\n// This is the starting point for the logout process, which is usually initiated when a\n// user clicks on the logout button on the LoginMenu component.\nexport class Logout extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            message: undefined,\n            isReady: false,\n            authenticated: false\n        };\n    }\n\n    componentDidMount() {\n        const action = this.props.action;\n        switch (action) {\n            case LogoutActions.Logout:\n                if (!!window.history.state.state.local) {\n                    this.logout(this.getReturnUrl());\n                } else {\n                    // This prevents regular links to <app>/authentication/logout from triggering a logout\n                    this.setState({ isReady: true, message: \"The logout was not initiated from within the page.\" });\n                }\n                break;\n            case LogoutActions.LogoutCallback:\n                this.processLogoutCallback();\n                break;\n            case LogoutActions.LoggedOut:\n                this.setState({ isReady: true, message: \"You successfully logged out!\" });\n                break;\n            default:\n                throw new Error(`Invalid action '${action}'`);\n        }\n\n        this.populateAuthenticationState();\n    }\n\n    render() {\n        const { isReady, message } = this.state;\n        if (!isReady) {\n            return <div></div>\n        }\n        if (!!message) {\n            return (<div>{message}</div>);\n        } else {\n            const action = this.props.action;\n            switch (action) {\n                case LogoutActions.Logout:\n                    return (<div>Processing logout</div>);\n                case LogoutActions.LogoutCallback:\n                    return (<div>Processing logout callback</div>);\n                case LogoutActions.LoggedOut:\n                    return (<div>{message}</div>);\n                default:\n                    throw new Error(`Invalid action '${action}'`);\n            }\n        }\n    }\n\n    async logout(returnUrl) {\n        const state = { returnUrl };\n        const isauthenticated = await authService.isAuthenticated();\n        if (isauthenticated) {\n            const result = await authService.signOut(state);\n            switch (result.status) {\n                case AuthenticationResultStatus.Redirect:\n                    break;\n                case AuthenticationResultStatus.Success:\n                    await this.navigateToReturnUrl(returnUrl);\n                    break;\n                case AuthenticationResultStatus.Fail:\n                    this.setState({ message: result.message });\n                    break;\n                default:\n                    throw new Error(\"Invalid authentication result status.\");\n            }\n        } else {\n            this.setState({ message: \"You successfully logged out!\" });\n        }\n    }\n\n    async processLogoutCallback() {\n        const url = window.location.href;\n        const result = await authService.completeSignOut(url);\n        switch (result.status) {\n            case AuthenticationResultStatus.Redirect:\n                // There should not be any redirects as the only time completeAuthentication finishes\n                // is when we are doing a redirect sign in flow.\n                throw new Error('Should not redirect.');\n            case AuthenticationResultStatus.Success:\n                await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n                break;\n            case AuthenticationResultStatus.Fail:\n                this.setState({ message: result.message });\n                break;\n            default:\n                throw new Error(\"Invalid authentication result status.\");\n        }\n    }\n\n    async populateAuthenticationState() {\n        const authenticated = await authService.isAuthenticated();\n        this.setState({ isReady: true, authenticated });\n    }\n\n    getReturnUrl(state) {\n        const params = new URLSearchParams(window.location.search);\n        const fromQuery = params.get(QueryParameterNames.ReturnUrl);\n        if (fromQuery && !fromQuery.startsWith(`${window.location.origin}/`)) {\n            // This is an extra check to prevent open redirects.\n            throw new Error(\"Invalid return url. The return url needs to have the same origin as the current page.\")\n        }\n        return (state && state.returnUrl) ||\n            fromQuery ||\n            `${window.location.origin}${ApplicationPaths.LoggedOut}`;\n    }\n\n    navigateToReturnUrl(returnUrl) {\n        return window.location.replace(returnUrl);\n    }\n}\n","import React, { Component, Fragment } from 'react';\nimport { Route } from 'react-router';\nimport { Login } from './Login'\nimport { Logout } from './Logout'\nimport { ApplicationPaths, LoginActions, LogoutActions } from './ApiAuthorizationConstants';\n\nexport default class ApiAuthorizationRoutes extends Component {\n\n  render () {\n    return(\n      <Fragment>\n          <Route path={ApplicationPaths.Login} render={() => loginAction(LoginActions.Login)} />\n          <Route path={ApplicationPaths.LoginFailed} render={() => loginAction(LoginActions.LoginFailed)} />\n          <Route path={ApplicationPaths.LoginCallback} render={() => loginAction(LoginActions.LoginCallback)} />\n          <Route path={ApplicationPaths.Profile} render={() => loginAction(LoginActions.Profile)} />\n          <Route path={ApplicationPaths.Register} render={() => loginAction(LoginActions.Register)} />\n          <Route path={ApplicationPaths.LogOut} render={() => logoutAction(LogoutActions.Logout)} />\n          <Route path={ApplicationPaths.LogOutCallback} render={() => logoutAction(LogoutActions.LogoutCallback)} />\n          <Route path={ApplicationPaths.LoggedOut} render={() => logoutAction(LogoutActions.LoggedOut)} />\n      </Fragment>);\n  }\n}\n\nfunction loginAction(name){\n    return (<Login action={name}></Login>);\n}\n\nfunction logoutAction(name) {\n    return (<Logout action={name}></Logout>);\n}\n","import React, { Component } from 'react';\nimport { Route } from 'react-router';\nimport { Layout } from './components/Layout';\nimport { Home } from './components/Home';\nimport { FetchData } from './components/FetchData';\nimport { Counter } from './components/Counter';\nimport AuthorizeRoute from './components/api-authorization/AuthorizeRoute';\nimport ApiAuthorizationRoutes from './components/api-authorization/ApiAuthorizationRoutes';\nimport { ApplicationPaths } from './components/api-authorization/ApiAuthorizationConstants';\n\nimport './custom.css'\n\nexport default class App extends Component {\n  static displayName = App.name;\n\n  render () {\n    return (\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/counter' component={Counter} />\n        <AuthorizeRoute path='/fetch-data' component={FetchData} />\n        <Route path={ApplicationPaths.ApiAuthorizationPrefix} component={ApiAuthorizationRoutes} />\n      </Layout>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nconst baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <BrowserRouter basename={baseUrl}>\n    <App />\n  </BrowserRouter>,\n  rootElement\n);\n\n// Uncomment the line above that imports the registerServiceWorker function\n// and the line below to register the generated service worker.\n// By default create-react-app includes a service worker to improve the\n// performance of the application by caching static assets. This service\n// worker can interfere with the Identity UI, so it is\n// disabled by default when Identity is being used.\n//\nregisterServiceWorker();\n"],"sourceRoot":""}